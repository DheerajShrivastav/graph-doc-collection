// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DocDeleted extends ethereum.Event {
  get params(): DocDeleted__Params {
    return new DocDeleted__Params(this);
  }
}

export class DocDeleted__Params {
  _event: DocDeleted;

  constructor(event: DocDeleted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get docAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DocUploaded extends ethereum.Event {
  get params(): DocUploaded__Params {
    return new DocUploaded__Params(this);
  }
}

export class DocUploaded__Params {
  _event: DocUploaded;

  constructor(event: DocUploaded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get docAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get title(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class DocCollection__getUploadsResultValue0Struct extends ethereum.Tuple {
  get title(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }
}

export class DocCollection extends ethereum.SmartContract {
  static bind(address: Address): DocCollection {
    return new DocCollection("DocCollection", address);
  }

  getUploads(
    docAddress: Address,
    tokenId: BigInt
  ): DocCollection__getUploadsResultValue0Struct {
    let result = super.call(
      "getUploads",
      "getUploads(address,uint256):((string,address))",
      [
        ethereum.Value.fromAddress(docAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<DocCollection__getUploadsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUploads(
    docAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<DocCollection__getUploadsResultValue0Struct> {
    let result = super.tryCall(
      "getUploads",
      "getUploads(address,uint256):((string,address))",
      [
        ethereum.Value.fromAddress(docAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DocCollection__getUploadsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }
}

export class DeleteDocumentCall extends ethereum.Call {
  get inputs(): DeleteDocumentCall__Inputs {
    return new DeleteDocumentCall__Inputs(this);
  }

  get outputs(): DeleteDocumentCall__Outputs {
    return new DeleteDocumentCall__Outputs(this);
  }
}

export class DeleteDocumentCall__Inputs {
  _call: DeleteDocumentCall;

  constructor(call: DeleteDocumentCall) {
    this._call = call;
  }

  get docAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeleteDocumentCall__Outputs {
  _call: DeleteDocumentCall;

  constructor(call: DeleteDocumentCall) {
    this._call = call;
  }
}

export class UploadDocCall extends ethereum.Call {
  get inputs(): UploadDocCall__Inputs {
    return new UploadDocCall__Inputs(this);
  }

  get outputs(): UploadDocCall__Outputs {
    return new UploadDocCall__Outputs(this);
  }
}

export class UploadDocCall__Inputs {
  _call: UploadDocCall;

  constructor(call: UploadDocCall) {
    this._call = call;
  }

  get docAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get title(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UploadDocCall__Outputs {
  _call: UploadDocCall;

  constructor(call: UploadDocCall) {
    this._call = call;
  }
}
